{"ast":null,"code":"var _jsxFileName = \"/Users/diana/solidity/optillistic/ICO/src/App.js\";\nimport './App.css';\nimport { ethers } from 'ethers';\nimport SpaceCoin from './artifacts/contracts/SpaceCoin.sol/SpaceCoin.json';\nimport ICO from './artifacts/contracts/ICO.sol/ICO.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spaceCoinAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3';\nconst icoAddress = '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512';\n\nfunction App() {\n  async function requestAccount() {\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (err) {\n      console.log(\"Error: \", err);\n      alert(\"Login to Metamask first\");\n    }\n  }\n\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(spaceCoinAddress, SpaceCoin.abi, provider);\n      const balance = (await contract.balanceOf(account)) / 10 ** 18;\n      const message = \"Balance: \" + balance;\n      alert(message);\n      console.log(\"Balance: \", balance.toString());\n    }\n  }\n\n  async function deposit(eths) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(icoAddress, ICO.abi, signer);\n\n      try {\n        const transation = await contract.contribute({\n          value: ethers.utils.parseEther(eths)\n        });\n        await transation.wait();\n        alert(`${eths} ether successfully sent to ${icoAddress}`);\n        console.log(`${eths} ether successfully sent to ${icoAddress}`);\n      } catch (err) {\n        console.log(\"Error: \", err);\n        var emes = err.data.message;\n        var mes = emes.split(\"'\", 3);\n        const errorMessage = \"Transaction failed. Reason: \" + mes[1];\n        alert(errorMessage);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getBalance,\n        children: \"Get Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => deposit(document.getElementById('contr').value),\n        children: \"Deposit ETH Below\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"contr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 108\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/diana/solidity/optillistic/ICO/src/App.js"],"names":["ethers","SpaceCoin","ICO","spaceCoinAddress","icoAddress","App","requestAccount","window","ethereum","request","method","err","console","log","alert","getBalance","account","provider","providers","Web3Provider","contract","Contract","abi","balance","balanceOf","message","toString","deposit","eths","signer","getSigner","transation","contribute","value","utils","parseEther","wait","emes","data","mes","split","errorMessage","document","getElementById"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,SAAP,MAAsB,oDAAtB;AACA,OAAOC,GAAP,MAAgB,wCAAhB;;AAEA,MAAMC,gBAAgB,GAAG,4CAAzB;AACA,MAAMC,UAAU,GAAG,4CAAnB;;AAEA,SAASC,GAAT,GAAe;AAEb,iBAAeC,cAAf,GAAgC;AAC9B,QAAI;AACF,YAAMC,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxB,CAAN;AACD,KAFD,CAGA,OAAOC,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACAG,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD;AACF;;AAED,iBAAeC,UAAf,GAA4B;AAC1B,QAAI,OAAOR,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAM,CAACQ,OAAD,IAAY,MAAMT,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAxB,CAAxB;AACA,YAAMO,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCZ,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMY,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAX,CAAoBlB,gBAApB,EAAsCF,SAAS,CAACqB,GAAhD,EAAqDL,QAArD,CAAjB;AACA,YAAMM,OAAO,GAAG,OAAMH,QAAQ,CAACI,SAAT,CAAmBR,OAAnB,CAAN,IAAqC,MAAM,EAA3D;AACA,YAAMS,OAAO,GAAG,cAAcF,OAA9B;AACAT,MAAAA,KAAK,CAACW,OAAD,CAAL;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBU,OAAO,CAACG,QAAR,EAAzB;AACD;AACF;;AAED,iBAAeC,OAAf,CAAuBC,IAAvB,EAA6B;AAC3B,QAAI,OAAOrB,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,YAAMF,cAAc,EAApB;AACA,YAAMW,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCZ,MAAM,CAACC,QAAzC,CAAjB;AACA,YAAMqB,MAAM,GAAGZ,QAAQ,CAACa,SAAT,EAAf;AACA,YAAMV,QAAQ,GAAG,IAAIpB,MAAM,CAACqB,QAAX,CAAoBjB,UAApB,EAAgCF,GAAG,CAACoB,GAApC,EAAyCO,MAAzC,CAAjB;;AACA,UAAI;AACF,cAAME,UAAU,GAAG,MAAMX,QAAQ,CAACY,UAAT,CAAoB;AAACC,UAAAA,KAAK,EAAEjC,MAAM,CAACkC,KAAP,CAAaC,UAAb,CAAwBP,IAAxB;AAAR,SAApB,CAAzB;AACA,cAAMG,UAAU,CAACK,IAAX,EAAN;AACAtB,QAAAA,KAAK,CAAE,GAAEc,IAAK,+BAA8BxB,UAAW,EAAlD,CAAL;AACAQ,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEe,IAAK,+BAA8BxB,UAAW,EAA7D;AACD,OALD,CAMA,OAAOO,GAAP,EAAY;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACA,YAAI0B,IAAI,GAAG1B,GAAG,CAAC2B,IAAJ,CAASb,OAApB;AACA,YAAIc,GAAG,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAV;AACA,cAAMC,YAAY,GAAG,iCAAiCF,GAAG,CAAC,CAAD,CAAzD;AACAzB,QAAAA,KAAK,CAAC2B,YAAD,CAAL;AACH;AACF;AACF;;AAGD,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE1B,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMY,OAAO,CAACe,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCV,KAAlC,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,oBAEqG;AAAO,QAAA,IAAI,EAAG,MAAd;AAAqB,QAAA,EAAE,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA,cAFrG;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;KAvDQ5B,G;AAyDT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport { ethers } from 'ethers'\nimport SpaceCoin from './artifacts/contracts/SpaceCoin.sol/SpaceCoin.json'\nimport ICO from './artifacts/contracts/ICO.sol/ICO.json'\n\nconst spaceCoinAddress = '0x5FbDB2315678afecb367f032d93F642f64180aa3'\nconst icoAddress = '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512'\n\nfunction App() {\n\n  async function requestAccount() {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n    } \n    catch (err) {\n      console.log(\"Error: \", err)\n      alert(\"Login to Metamask first\");\n    }\n  }\n\n  async function getBalance() {\n    if (typeof window.ethereum !== 'undefined') {\n      const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const contract = new ethers.Contract(spaceCoinAddress, SpaceCoin.abi, provider)\n      const balance = await contract.balanceOf(account) / (10 ** 18);\n      const message = \"Balance: \" + balance;\n      alert(message)\n      console.log(\"Balance: \", balance.toString());\n    }\n  }\n\n  async function deposit(eths) {\n    if (typeof window.ethereum !== 'undefined') {\n      await requestAccount()\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const contract = new ethers.Contract(icoAddress, ICO.abi, signer);\n      try {\n        const transation = await contract.contribute({value: ethers.utils.parseEther(eths)});\n        await transation.wait();\n        alert(`${eths} ether successfully sent to ${icoAddress}`)\n        console.log(`${eths} ether successfully sent to ${icoAddress}`);\n      }\n      catch (err) {\n          console.log(\"Error: \", err)\n          var emes = err.data.message\n          var mes = emes.split(\"'\", 3)\n          const errorMessage = \"Transaction failed. Reason: \" + mes[1]\n          alert(errorMessage)\n      }\n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={getBalance}>Get Balance</button>\n        <button onClick={() => deposit(document.getElementById('contr').value)}>Deposit ETH Below</button> <input type = \"text\" id=\"contr\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}